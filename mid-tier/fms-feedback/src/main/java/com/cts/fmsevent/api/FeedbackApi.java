/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cts.fmsevent.api;

import java.io.IOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cts.fmsevent.model.Feedback;
import com.cts.fmsevent.model.FeedbackQuesAns;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-03-18T16:20:05.203+05:30")

@Api(value = "feedback", description = "the feedback API")
public interface FeedbackApi {

    Logger log = LoggerFactory.getLogger(FeedbackApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "", nickname = "feedbackFbIdGet", notes = "get feedback by id", response = Feedback.class, tags={ "feedback by Id", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "fetch feedback by Id", response = Feedback.class),
        @ApiResponse(code = 404, message = "No DataFound") })
    @RequestMapping(value = "/feedback/{fbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Mono<ResponseEntity<Feedback>> feedbackFbIdGet(@ApiParam(value = "",required=true) @PathVariable("fbId") Integer fbId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return Mono.just(new ResponseEntity<>(getObjectMapper().get().readValue("{  \"feedbackAnswerType\" : \"feedbackAnswerType\",  \"feedbackId\" : 0,  \"feedbackType\" : 6,  \"feedbackQuestion\" : \"feedbackQuestion\"}", Feedback.class), HttpStatus.NOT_IMPLEMENTED));
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return Mono.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FeedbackApi interface so no example is generated");
        }
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
    }


    @ApiOperation(value = "", nickname = "feedbackGet", notes = "get feedback details", response = Feedback.class, responseContainer = "List", tags={ "feedback", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "fetch  feedback", response = Feedback.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "No DataFound") })
    @RequestMapping(value = "/feedback",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default Flux<ResponseEntity<Feedback>> feedbackGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return Flux.just(new ResponseEntity<>(getObjectMapper().get().readValue("{  \"feedbackAnswerType\" : \"feedbackAnswerType\",  \"feedbackId\" : 0,  \"feedbackType\" : 6,  \"feedbackQuestion\" : \"feedbackQuestion\"}", Feedback.class), HttpStatus.NOT_IMPLEMENTED));
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return Flux.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FeedbackApi interface so no example is generated");
        }
        return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
    }


    @ApiOperation(value = "", nickname = "feedbackPost", notes = "add feedback", tags={ "feedback", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully added"),
        @ApiResponse(code = 404, message = "unsuccessful") })
    @RequestMapping(value = "/feedback",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default Mono<ResponseEntity<Void>> feedbackPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FeedbackQuesAns feedback) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FeedbackApi interface so no example is generated");
        }
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
    }


    @ApiOperation(value = "", nickname = "feedbackPut", notes = "update feedback", tags={ "feedback", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully updated"),
        @ApiResponse(code = 404, message = "unsuccessful") })
    @RequestMapping(value = "/feedback",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default Mono<ResponseEntity<Void>> feedbackPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FeedbackQuesAns feedback) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default FeedbackApi interface so no example is generated");
        }
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
    }

}
